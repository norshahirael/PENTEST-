import subprocess
from django.http import HttpResponse
from django.shortcuts import render, redirect
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.models import User
from .forms import SuggestToolsForm, LoginForm, RegisterForm
from django.db import IntegrityError
import joblib
import pandas as pd

# Load the model and label encoders at the start to avoid loading them multiple times
model = joblib.load('models/pentest_model.pkl')

label_encoders = {}
for column in ['pentest_goal', 'type_of_system', 'tools_category', 'platform']:
    label_encoders[column] = joblib.load(f'models/{column}_encoder.pkl')

def home(request):
    return render(request, 'suggestions/home.html')

def suggest_tools(request):
    if request.method == 'POST':
        form = SuggestToolsForm(request.POST)
        if form.is_valid():
            pentest_goal = form.cleaned_data['pentest_goal']
            type_of_system = form.cleaned_data['type_of_system']
            tools_category = form.cleaned_data['tools_category']
            platform = form.cleaned_data['platform']

            input_data = pd.DataFrame({
                'Pentest Goal': [pentest_goal],
                'Type of System': [type_of_system],
                'Tools Category': [tools_category],
                'Platform': [platform]
            })

            prediction = model.predict(input_data)[0]
            suggested_tool = "Nmap" if prediction == 1 else "sqlmap"
            return render(request, 'suggestions/result.html', {'suggested_tool': suggested_tool})
    else:
        form = SuggestToolsForm()
    return render(request, 'suggestions/predict.html', {'form': form})

def user_login(request):
    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                return redirect('suggestions:suggest_tools')
    else:
        form = LoginForm()
    return render(request, 'suggestions/login.html', {'form': form})

def user_register(request):
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            try:
                User.objects.create_user(username=username, password=password)
                return redirect('suggestions:login')
            except IntegrityError:
                form.add_error('username', 'This username is already taken. Please choose a different one.')
    else:
        form = RegisterForm()
    return render(request, 'suggestions/register.html', {'form': form})

def user_logout(request):
    logout(request)
    return redirect('suggestions:home')

def run_nmap(request):
    if request.method == 'POST':
        target = request.POST['target']
        command = ['nmap', target]
        result = subprocess.run(command, capture_output=True, text=True)
        return render(request, 'suggestions/nmap_result.html', {'result': result.stdout})
    return redirect('suggestions:home')

def run_sqlmap(request):
    if request.method == 'POST':
        url = request.POST.get('target_sqlmap')
        if url:
            # Assuming your sqlmap command is something like 'sqlmap -u URL'
            command = ['sqlmap', '-u', url]
            try:
                # Run the sqlmap command and capture the output
                result = subprocess.run(command, capture_output=True, text=True, check=True)
                # Process the result as needed
                return HttpResponse(result.stdout)
            except subprocess.CalledProcessError as e:
                # Handle any errors that occur during command execution
                return HttpResponse(f"Error: {e}")
        else:
            # Handle case where URL is not provided
            return HttpResponse("Please provide a URL.")
    else:
        # Handle case where request method is not POST
        return HttpResponse("Invalid request method.")