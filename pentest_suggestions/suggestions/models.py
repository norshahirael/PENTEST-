from django.db import models
from django.contrib.auth.models import User
from django.utils import timezone


default_user_id = 1  

class Pentest(models.Model):
    GOAL_CHOICES = [
        (0, 'Web-application'),
        (1, 'Network'),
        (2, 'Cloud')
    ]
    TYPE_CHOICES = [
        (0, 'Web-based'),
        (1, 'Mobile'),
        (2, 'Network')
    ]
    TOOLS_CHOICES = [
        (0, 'Web-application'),
        (1, 'Network'),
        (2, 'Code-analysis'),
        (3, 'Password-Cracking')
    ]
    PLATFORM_CHOICES = [
        (0, 'Windows'),
        (1, 'Linux'),
        (2, 'MacOS'),
        (3, 'Cloud')
    ]
    
    pentest_goal = models.IntegerField(choices=GOAL_CHOICES)
    type_of_system = models.IntegerField(choices=TYPE_CHOICES)
    tools_category = models.IntegerField(choices=TOOLS_CHOICES)
    platform = models.IntegerField(choices=PLATFORM_CHOICES)
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='pentests', default=default_user_id)
    created_at = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f'Pentest: {self.id}'

    def get_goal_display(self):
        return dict(self.GOAL_CHOICES).get(self.pentest_goal, 'Unknown')

    def get_typeS_display(self):
        return dict(self.TYPE_CHOICES).get(self.type_of_system, 'Unknown')

    def get_toolsC_display(self):
        return dict(self.TOOLS_CHOICES).get(self.tools_category, 'Unknown')

    def get_platform_display(self):
        return dict(self.PLATFORM_CHOICES).get(self.platform, 'Unknown')

class SuggestionHistory(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='suggestions')
    pentest = models.ForeignKey(Pentest, on_delete=models.CASCADE)
    suggested_tool = models.CharField(max_length=100)
    timestamp = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f'{self.user.username} - {self.suggested_tool} at {self.timestamp}'

class ToolExecutionHistory(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, related_name='executions')
    tool_name = models.CharField(max_length=100)
    execution_result = models.TextField()
    timestamp = models.DateTimeField(auto_now_add=True)
    created_at = models.DateTimeField(default=timezone.now)

    def __str__(self):
        return f'{self.user.username} - {self.tool_name} execution at {self.timestamp}'

class Feedback(models.Model):
    pentest = models.ForeignKey(Pentest, on_delete=models.CASCADE, related_name='feedbacks')
    agree = models.BooleanField()
    preferred_suggestion = models.CharField(max_length=255, null=True, blank=True)

    def __str__(self):
        return f'Feedback for {self.pentest.user.username} - Agree: {self.agree}'
