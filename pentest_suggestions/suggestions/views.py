import json
import subprocess
from django.urls import reverse  
from django.http import HttpResponse, JsonResponse, HttpResponseBadRequest
from django.shortcuts import render, redirect, get_object_or_404
from django.contrib.auth import authenticate, login, logout
from django.contrib.auth.models import User
from django.db import IntegrityError
import joblib
import pandas as pd
from .models import Pentest, SuggestionHistory, ToolExecutionHistory, Feedback
from .forms import SuggestToolsForm, LoginForm, RegisterForm, FeedbackForm
from django.contrib.auth.decorators import login_required
from django.contrib import messages
from django.views.decorators.csrf import csrf_exempt
from django.core.exceptions import ObjectDoesNotExist

model = joblib.load('models/pentest_model.pkl')

label_encoders = {}
for column in ['pentest_goal', 'type_of_system', 'tools_category', 'platform']:
    label_encoders[column] = joblib.load(f'models/{column}_encoder.pkl')

def home(request):
    print("Accessing home page")
    return render(request, 'suggestions/home.html')

@login_required
def dashboard(request):
    print("Accessing dashboard")
    return render(request, 'suggestions/dashboard.html')

def suggest_tools(request):
    print("Accessing suggest_tools function")
    if request.method == 'POST':
        form = SuggestToolsForm(request.POST)
        if form.is_valid():
            pentest_goal = form.cleaned_data['pentest_goal']
            type_of_system = form.cleaned_data['type_of_system']
            tools_category = form.cleaned_data['tools_category']
            platform = form.cleaned_data['platform']

            input_data = pd.DataFrame({
                'Pentest Goal': [pentest_goal],
                'Type of System': [type_of_system],
                'Tools Category': [tools_category],
                'Platform': [platform]
            })

            prediction = model.predict(input_data)[0]
            suggested_tool = "Nmap & SQLMap" if prediction == 1 else "SQLMap & Gobuster"

            pentest = Pentest.objects.create(
                pentest_goal=pentest_goal,
                type_of_system=type_of_system,
                tools_category=tools_category,
                platform=platform
            )
            SuggestionHistory.objects.create(
                user=request.user,
                pentest=pentest,
                suggested_tool=suggested_tool
            )

            print(f"Suggested tools: {suggested_tool}") 
            return render(request, 'suggestions/result.html', {'suggested_tool': suggested_tool})

    else:
        form = SuggestToolsForm()
    return render(request, 'suggestions/predict.html', {'form': form})

@login_required
def history(request):
    print("Accessing history function")
    history = SuggestionHistory.objects.filter(user=request.user).order_by('-timestamp')
    return render(request, 'suggestions/history.html', {'history': history})

@login_required
def tool_execution_history(request):
    print("Accessing tool_execution_history function")
    history = ToolExecutionHistory.objects.filter(user=request.user).order_by('-timestamp')
    return render(request, 'suggestions/tool_execution_history.html', {'history': history})

@login_required
def delete_history(request, history_id):
    print(f"Deleting history entry with ID: {history_id}")
    history_entry = get_object_or_404(SuggestionHistory, id=history_id, user=request.user)
    if request.method == 'POST':
        history_entry.delete()
    return redirect('suggestions:history')

@login_required
def delete_execution_history(request, history_id):
    print(f"Deleting execution history entry with ID: {history_id}")
    history_entry = get_object_or_404(ToolExecutionHistory, id=history_id, user=request.user)
    if request.method == 'POST':
        history_entry.delete()
    return redirect('suggestions:tool_execution_history')

def user_login(request):
    print("Accessing user_login function")
    if request.method == 'POST':
        form = LoginForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            password = form.cleaned_data['password']
            user = authenticate(username=username, password=password)
            if user is not None:
                login(request, user)
                print(f"User {username} logged in successfully")
                return redirect('suggestions:dashboard')
            else:
                form.add_error(None, 'Invalid username or password.')
    else:
        form = LoginForm()
    return render(request, 'suggestions/login.html', {'form': form})

def user_register(request):
    print("Accessing user_register function")
    if request.method == 'POST':
        form = RegisterForm(request.POST)
        if form.is_valid():
            username = form.cleaned_data['username']
            email = form.cleaned_data['email']
            password = form.cleaned_data['password']
            try:
                User.objects.create_user(username=username, email=email, password=password)
                print(f"User {username} registered successfully")
                return redirect(reverse('suggestions:login'))
            except IntegrityError:
                form.add_error('username', 'This username is already taken. Please choose a different one.')
    else:
        form = RegisterForm()
    return render(request, 'suggestions/register.html', {'form': form})

@login_required
def user_logout(request):
    print("Logging out user")
    logout(request)
    return redirect('suggestions:home')

def run_nmap(request):
    print("Executing run_nmap function")
    if request.method == 'POST':
        target = request.POST.get('target')
        if target:
            command = ['nmap', target]
            try:
                result = subprocess.run(command, capture_output=True, text=True, check=True)
                ToolExecutionHistory.objects.create(
                    user=request.user,
                    tool_name='Nmap',
                    execution_result=result.stdout
                )
                print(f"Nmap executed successfully: {result.stdout}")
                return render(request, 'suggestions/run_nmap.html', {'result': result.stdout})
            except subprocess.CalledProcessError as e:
                error_message = f"Error: {e}"
                print(f"Nmap execution failed: {error_message}")
                return HttpResponse(f"Error: {e}")
        else:
            return HttpResponse("Please provide a target IP address.")
    else:
        return render(request, 'suggestions/run_nmap.html')

def run_sqlmap(request):
    print("Executing run_sqlmap function")
    if request.method == 'POST':
        url = request.POST.get('target_sqlmap')
        if url:
            sqlmap_path = '/home/ira/new_project/pentest_suggestions/sqlmap-dev/sqlmap.py'
            command = ['python3', sqlmap_path, '-u', url]
            try:
                result = subprocess.run(command, capture_output=True, text=True, check=True)
                ToolExecutionHistory.objects.create(
                    user=request.user,
                    tool_name='SQLmap',
                    execution_result=result.stdout
                )
                print(f"SQLmap executed successfully: {result.stdout}")
                return render(request, 'suggestions/run_sqlmap.html', {'result': result.stdout})
            except subprocess.CalledProcessError as e:
                error_message = f"Error: {e}"
                print(f"SQLmap execution failed: {error_message}")
                return HttpResponse(f"Error: {e}")
        else:
            return HttpResponse("Please provide a URL.")
    else:
        return render(request, 'suggestions/run_sqlmap.html')

def run_gobuster(request):
    print("Executing run_gobuster function")
    if request.method == 'POST':
        target = request.POST.get('target_gobuster')
        if target:
            command = ['gobuster', 'dir', '-u', target, '-w', '/home/ira/wordlists/Discovery/Web-Content/common.txt']
            try:
                result = subprocess.run(command, capture_output=True, text=True, check=True)
                ToolExecutionHistory.objects.create(
                    user=request.user,
                    tool_name='Gobuster',
                    execution_result=result.stdout
                )
                print(f"Gobuster executed successfully: {result.stdout}")
                return render(request, 'suggestions/run_gobuster.html', {'result': result.stdout})
            except subprocess.CalledProcessError as e:
                error_message = f"Error: {e.stderr}"
                print(f"Gobuster execution failed: {error_message}")
                return render(request, 'suggestions/run_gobuster.html', {'error': error_message})
        else:
            print("No target provided for Gobuster.")
            return HttpResponse("Please provide a target URL or IP address.")
    else:
        return render(request, 'suggestions/run_gobuster.html')

@login_required
@csrf_exempt
def submit_feedback(request):
    print("Submitting feedback")
    if request.method == 'POST':
        try:
            data = json.loads(request.body)
            agree = data.get('agree')
            preferred_suggestion = data.get('preferred_suggestion')

            pentest = Pentest.objects.filter(user=request.user).order_by('-id').first()

            if pentest:
                Feedback.objects.create(
                    pentest=pentest,
                    agree=agree,
                    preferred_suggestion=preferred_suggestion
                )
                print("Feedback submitted successfully") 
                return JsonResponse({'status': 'success'})
            else:
                return JsonResponse({'status': 'failed', 'message': 'No pentest data found for the user'}, status=400)

        except json.JSONDecodeError:
            return JsonResponse({'status': 'failed', 'message': 'Invalid JSON'}, status=400)
        except Exception as e:
            return JsonResponse({'status': 'failed', 'message': str(e)}, status=500)

    return JsonResponse({'status': 'failed', 'message': 'Invalid request method'}, status=405)
