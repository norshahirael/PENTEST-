from django.test import TestCase, Client
from django.urls import reverse
from django.contrib.auth.models import User
from .models import Pentest, SuggestionHistory, ToolExecutionHistory, Feedback
from .forms import SuggestToolsForm, LoginForm, RegisterForm
import pandas as pd
import joblib
import json
import subprocess
from django.core.exceptions import ObjectDoesNotExist
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
from sklearn.metrics import classification_report, confusion_matrix

class PentestModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='testpass')
        self.pentest = Pentest.objects.create(
            pentest_goal= 1,
            type_of_system= 1,
            tools_category= 1,
            platform= 1,
            user=self.user
        )

    def test_pentest_creation(self):
        self.assertEqual(self.pentest.pentest_goal, 1)
        self.assertEqual(self.pentest.type_of_system, 1)
        self.assertEqual(self.pentest.tools_category, 1)
        self.assertEqual(self.pentest.platform, 1)
        print("Test PentestModelTest: test_pentest_creation - OK")

class SuggestionHistoryModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='testpass')
        self.pentest = Pentest.objects.create(
            pentest_goal= 1,
            type_of_system= 1,
            tools_category= 1,
            platform= 1,
            user=self.user
        )
        self.suggestion_history = SuggestionHistory.objects.create(
            user=self.user,
            pentest=self.pentest,
            suggested_tool='Nmap & SQLMap'
        )

    def test_suggestion_history_creation(self):
        self.assertEqual(self.suggestion_history.user.username, 'testuser')
        self.assertEqual(self.suggestion_history.pentest, self.pentest)
        self.assertEqual(self.suggestion_history.suggested_tool, 'Nmap & SQLMap')
        print("Test SuggestionHistoryModelTest: test_suggestion_history_creation - OK")

class ToolExecutionHistoryModelTest(TestCase):
    def setUp(self):
        self.user = User.objects.create_user(username='testuser', password='testpass')
        self.tool_execution_history = ToolExecutionHistory.objects.create(
            user=self.user,
            tool_name='Nmap',
            execution_result='Test result'
        )

    def test_tool_execution_history_creation(self):
        self.assertEqual(self.tool_execution_history.user.username, 'testuser')
        self.assertEqual(self.tool_execution_history.tool_name, 'Nmap')
        self.assertEqual(self.tool_execution_history.execution_result, 'Test result')
        print("Test ToolExecutionHistoryModelTest: test_tool_execution_history_creation - OK")

class ViewsTestCase(TestCase):
    def setUp(self):
        self.client = Client()
        self.user = User.objects.create_user(username='testuser', password='testpass')
        self.client.login(username='testuser', password='testpass')

    def test_suggest_tools_view(self):
        response = self.client.get(reverse('suggestions:suggest_tools'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'suggestions/predict.html')
        print("Test ViewsTestCase: test_suggest_tools_view - OK")

    def test_history_view(self):
        response = self.client.get(reverse('suggestions:history'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'suggestions/history.html')
        print("Test ViewsTestCase: test_history_view - OK")

    def test_tool_execution_history_view(self):
        response = self.client.get(reverse('suggestions:tool_execution_history'))
        self.assertEqual(response.status_code, 200)
        self.assertTemplateUsed(response, 'suggestions/tool_execution_history.html')
        print("Test ViewsTestCase: test_tool_execution_history_view - OK")

    def test_run_nmap_view(self):
        response = self.client.post(reverse('suggestions:run_nmap'), {'target': '127.0.0.1'})
        self.assertEqual(response.status_code, 200)
        print("Test ViewsTestCase: test_run_nmap_view - OK")

    def test_run_sqlmap_view(self):
        response = self.client.post(reverse('suggestions:run_sqlmap'), {'target_sqlmap': 'http://testphp.vulnweb.com'})
        self.assertEqual(response.status_code, 200)
        print("Test ViewsTestCase: test_run_sqlmap_view - OK")

    def test_run_gobuster_view(self):
        response = self.client.post(reverse('suggestions:run_gobuster'), {'target_gobuster': 'http://testphp.vulnweb.com'})
        self.assertEqual(response.status_code, 200)
        print("Test ViewsTestCase: test_run_gobuster_view - OK")

class ModelTrainingTestCase(TestCase):
    def setUp(self):
        # Create sample data
        data = {
            'Pentest Goal': [0, 1, 2],  # Adjusted to match the correct columns
            'Type of System': ['Web-application', 'Network', 'Cloud'],
            'Tools Category': ['Web-application', 'Network', 'Code-analysis'],
            'Platform': ['Windows', 'Linux', 'MacOS'],
            'Suggested Tools': [0, 1, 2]
        }
        self.df = pd.DataFrame(data)
        # Assuming preprocess_data and prepare_data functions are implemented
        self.features = self.df[['Pentest Goal', 'Type of System', 'Tools Category', 'Platform']]
        self.target = self.df['Suggested Tools']
        
    # Encode categorical features
        self.label_encoders = {}
        for column in self.features.columns:
            le = LabelEncoder()
            self.features.loc[:,column] = le.fit_transform(self.features[column])
            self.label_encoders[column] = le
        
        self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(self.features, self.target, test_size=0.2, random_state=42)
        
    def test_model_training(self):
        model = LogisticRegression()
        model.fit(self.X_train, self.y_train)
        self.assertIsNotNone(model)
        print("Test ModelTrainingTestCase: test_model_training - OK")

    def test_model_loading(self):
        model = joblib.load('models/pentest_model.pkl')
        self.assertIsNotNone(model)
        print("Test ModelTrainingTestCase: test_model_loading - OK")

class IntegrationTestCase(TestCase):
    def setUp(self):
        self.client = Client()
        self.user = User.objects.create_user(username='testuser', password='testpass')
        self.client.login(username='testuser', password='testpass')

    def test_add_and_view_pentest(self):
        response = self.client.post(reverse('suggestions:suggest_tools'), {
            'pentest_goal': 1,
            'type_of_system': 1,
            'tools_category': 1,
            'platform': 1,
        })
        self.assertEqual(response.status_code, 200)

        response = self.client.get(reverse('suggestions:history'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 1)
        self.assertContains(response, 1)
        print("Test IntegrationTestCase: test_add_and_view_pentest - OK")

    def test_full_workflow(self):
        self.client.post(reverse('suggestions:suggest_tools'), {
            'pentest_goal': 1,
            'type_of_system': 1,
            'tools_category': 1,
            'platform': 1,
        })

        response = self.client.get(reverse('suggestions:history'))
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, 1)

        response = self.client.post(reverse('suggestions:run_nmap'), {'target': '127.0.0.1'})
        self.assertEqual(response.status_code, 200)

        response = self.client.post(reverse('suggestions:run_sqlmap'), {'target_sqlmap': 'http://testphp.vulnweb.com'})
        self.assertEqual(response.status_code, 200)

        response = self.client.post(reverse('suggestions:run_gobuster'), {'target_gobuster': 'http://testphp.vulnweb.com'})
        self.assertEqual(response.status_code, 200)
        print("Test IntegrationTestCase: test_full_workflow - OK")

        model = joblib.load('models/pentest_model.pkl')
        self.assertIsNotNone(model)
        print("Test IntegrationTestCase: test_full_workflow - model loading OK")
